<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.by.mapper.RoleMapper" >
  <resultMap id="BaseResultMap" type="com.by.model.Role" >
    <id column="role_id" property="roleId" jdbcType="INTEGER" />
    <result column="role_name" property="roleName" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    role_id, role_name
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from r_role
    where role_id = #{roleId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from r_role
    where role_id = #{roleId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.by.model.Role" >
    insert into r_role (role_id, role_name)
    values (#{roleId,jdbcType=INTEGER}, #{roleName,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.by.model.Role" >
    insert into r_role
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="roleId != null" >
        role_id,
      </if>
      <if test="roleName != null" >
        role_name,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="roleId != null" >
        #{roleId,jdbcType=INTEGER},
      </if>
      <if test="roleName != null" >
        #{roleName,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.by.model.Role" >
    update r_role
    <set >
      <if test="roleName != null" >
        role_name = #{roleName,jdbcType=VARCHAR},
      </if>
    </set>
    where role_id = #{roleId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.by.model.Role" >
    update r_role
    set role_name = #{roleName,jdbcType=VARCHAR}
    where role_id = #{roleId,jdbcType=INTEGER}
  </update>
  <select id="query" resultType="com.by.model.Role">
    select * from r_role
  </select>
  <delete id="delete">
    delete from r_role where role_id in
        <foreach collection="arr" item="id" separator="," open="(" close=")">
             #{id}
         </foreach>
  </delete>
  <select id="findAll" resultMap="findAllMap">
     select
				r.role_id as role_id ,r.role_name as role_name , p.permission_name as permission_name
			FROM
					(select * from r_role limit #{start},#{limit}) r LEFT JOIN t_rp e on r.role_id= e.role_id
						LEFT JOIN t_permission p on e.permission_id=p.permission_id
  </select>
  <resultMap id="findAllMap" type="com.by.model.RolepermissionVo" autoMapping="true">
    <id column="role_id" property="roleId"></id>
    <!-- ofType 泛型的类型  -->
    <collection property="permissions" ofType="com.by.model.Permission" autoMapping="true">
    </collection>
  </resultMap>
  <insert id="insertrolepermission"  ><![CDATA[
  insert into t_rp (role_id,permission_id) values
  ]]><foreach collection="rp.permissions" item="role" separator=",">
    <if test="role != null">
      ( #{rp.roleId}, #{role})
    </if>
  </foreach>
  </insert>
  <select id="findAll1" resultType="com.by.model.Role">
    select * from r_role
  </select>
  <select id="findRoleIdsByUserId" resultType="int">
    select permission_id from t_rp where role_id = #{roleId}
  </select>
</mapper>